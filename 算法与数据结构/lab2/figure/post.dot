digraph {
  init[label="u <- root\ninit stack"];
  judge0[label="is u null and stack empty?"];
  judge1[label="is u null?"];
  judge2[label="stack is non-empty and u isn't the leftson the top of stack?"];
  print[label="print the value of u"];
  lson[label="u <- u.lson"];
  rson[label="u <- stack.top.rson"];
  push[label="push u into stack"];
  pop[label="u <- stack.top and pop the top of stack"];
  trson[label="temp <- u.rson"];
  back[label="if u is null then backtrack(u <- temp)"];
  null[label="u <- null"]
  { rank=max; end; }

  init -> judge0;
  judge0 -> end[label="Yes"];
  judge0 -> judge1[label="No"];
  judge1 -> pop[label="Yes"];
  judge1 -> push[label="No"];
  push -> tson -> lson -> back -> judge1;

  pop -> print -> judge2;
  judge2 -> rson[label="Yes"];
  rson -> judge0;
  judge2 -> null[label="No"];
  null -> judge0;
}
